{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPykns8F/+EfppdMHTk6zJl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JazminRivas/Calculo-numerico-1er-cuatri-2024/blob/main/gu%C3%ADa_4ipynb.\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "zBf1glNjdztO"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.gridspec import GridSpec\n",
        "from typing import Optional, Tuple\n",
        "import time"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ejercicio 1\n",
        "\n",
        "Demostrar las siguientes formulas para las normas inducidas sobre las matrices\n",
        "A ∈ R\n",
        "n×n a partir de las correspondientes normas en los vectores\n",
        "a) Por la norma infinito en los vectores:\n",
        "$$ \\|A\\|_{\\infty} = \\max_{1 \\leq i \\leq n} \\sum_{j=1}^{n} |a_{ij}| $$\n",
        "\n",
        "b) Por la norma 1 en los vectores:\n",
        "$$ \\|A\\|_{1} = \\max_{1 \\leq j \\leq n} \\sum_{i=1}^{n} |a_{ij}| $$\n",
        "\n",
        "c) Escriba funciones en Python para calcular estas normas\n",
        "\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "9xzduKGHeONg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#1c\n",
        "def norma_infinito(A):\n",
        "   M = np.shape(A)\n",
        "   tamaño_filas = M[0]\n",
        "   sumas = []\n",
        "   for i in range(tamaño_filas):\n",
        "       sumas.append(sum(abs(A[i,:])))\n",
        "   return np.max(sumas)\n",
        "A = np.array ([[1,  2,  3], [4,  5,  6],[7, 8, 9]])\n",
        "print(norma_infinito(A))\n",
        "\n",
        "def norma_uno(A):\n",
        "    N = np.shape(A)\n",
        "    tamaño_columnas = N[1]\n",
        "    suma = []\n",
        "    for i in range(tamaño_columnas):\n",
        "        suma.append(sum(abs(A[:,i])))\n",
        "    return np.max(suma)\n",
        "print(norma_uno(A))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6l0r9H0leyWL",
        "outputId": "8949118b-729b-4c61-eb58-62984fee8324"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "24\n",
            "18\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ejercicio 3.\n",
        "\n",
        "Se quiere estimar la norma 2 de una matriz $A \\in \\mathbb{R}^{3 \\times 3}$ como el máximo del valor $\\frac{\\|Ax\\|_2}{\\|x\\|_2}$ entre varios vectores $x \\in \\mathbb{R}^3$ no nulos generados al azar. Hacer un programa que reciba una matriz $A$ y luego:\n",
        "\n",
        "\n",
        "a) Genere los primeros 100 términos de la siguiente sucesión:\n",
        "    $ s_1 = 0, \\quad s_{k+1} = \\max\\{ s_k, \\frac{\\|Ax_k\\|_2}{\\|x_k\\|_2} \\} $\n",
        "    donde los $x_k \\in \\mathbb{R}^3$ son vectores no nulos generados al azar distribuidos uniformemente en el círculo unitario.\n",
        "    \n",
        "b) Grafique la sucesión calculada, junto con el valor exacto de la norma de la matriz.\n"
      ],
      "metadata": {
        "id": "RqhuflPafOfX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def generar_vectores_unitarios(N):\n",
        "    # Genera N vectores aleatorios en la esfera unitaria\n",
        "    vectores = []\n",
        "    for _ in range(N):\n",
        "        theta = np.random.uniform(0, 2 * np.pi)\n",
        "        phi = np.arccos(2 * np.random.uniform(0, 1) - 1)\n",
        "        x = np.sin(phi) * np.cos(theta)\n",
        "        y = np.sin(phi) * np.sin(theta)\n",
        "        z = np.cos(phi)\n",
        "        vector = np.array([x, y, z])\n",
        "        vectores.append(vector)\n",
        "    return vectores\n",
        "\n",
        "# Número de vectores a generar\n",
        "N = 100\n",
        "\n",
        "# Generar N vectores aleatorios en la esfera unitaria\n",
        "vectores_generados = generar_vectores_unitarios(N)\n",
        "\n",
        "# Imprimir los vectores generados\n",
        "print(\"Vectores generados en la esfera unitaria:\")\n",
        "for i, vector in enumerate(vectores_generados):\n",
        "    print(f\"Vector {i + 1}: {vector}\")\n",
        "\n",
        "def norma_dos(A,x):\n",
        "    Ax = np.dot(A,x)\n",
        "    norma_Ax = np.linalg.norm(Ax)\n",
        "    norma_x = np.linalg.norm(x)\n",
        "    return norma_Ax/norma_x\n",
        "\n",
        "def estimar_norma_2(A, iteraciones,N):\n",
        "    s = 0\n",
        "    max_valor = []\n",
        "    for i in range(iteraciones):\n",
        "        x = generar_vectores_unitarios(N)\n",
        "        for vector in x:\n",
        "            valor = norma_dos(A, vector)\n",
        "            s = max(s, valor)\n",
        "            max_valor.append(s)\n",
        "    return max_valor\n",
        "\n",
        "sucesion = estimar_norma_2(A, 5, 100)\n",
        "\n",
        "#vamos a compararla con la solucion de verdad\n",
        "valor_exacto = np.linalg.norm(A, ord=2)\n",
        "plt.plot(range(len(sucesion)), sucesion, label='Sucesión estimada')\n",
        "plt.axhline(y=valor_exacto, color='r', linestyle='--', label='Valor exacto')\n",
        "plt.xlabel('Iteración')\n",
        "plt.ylabel('Valor de la norma 2')\n",
        "plt.title('Sucesión estimada de la norma 2')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "wD0rul5CfjLL",
        "outputId": "abaf20b0-10f6-476f-d512-c80fc954357b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Vectores generados en la esfera unitaria:\n",
            "Vector 1: [0.02816762 0.36084354 0.93220091]\n",
            "Vector 2: [-0.43787635  0.77054817 -0.46316285]\n",
            "Vector 3: [-0.29996169  0.3113694  -0.9017051 ]\n",
            "Vector 4: [-0.28374923 -0.57884157 -0.76447944]\n",
            "Vector 5: [ 0.99914992  0.03203414 -0.02594693]\n",
            "Vector 6: [ 0.79070133  0.14797448 -0.59404963]\n",
            "Vector 7: [ 0.55327099  0.69455436 -0.45987548]\n",
            "Vector 8: [0.2976563  0.86493919 0.40408034]\n",
            "Vector 9: [ 0.70492552 -0.59632359 -0.38402889]\n",
            "Vector 10: [ 0.85418135 -0.43410671  0.28622645]\n",
            "Vector 11: [0.46948456 0.14843392 0.87037441]\n",
            "Vector 12: [-0.77338885  0.17956849 -0.6079678 ]\n",
            "Vector 13: [ 0.99713422 -0.00359383 -0.07556739]\n",
            "Vector 14: [-0.72310079 -0.56656463  0.39513259]\n",
            "Vector 15: [-0.74954933  0.29685323  0.59165359]\n",
            "Vector 16: [0.74615415 0.53652013 0.39420823]\n",
            "Vector 17: [ 0.76619668  0.41749776 -0.48850615]\n",
            "Vector 18: [-0.70784253 -0.0569098  -0.70407402]\n",
            "Vector 19: [-0.00879419 -0.74395148 -0.66817577]\n",
            "Vector 20: [-0.35021475 -0.0327558   0.93609652]\n",
            "Vector 21: [ 0.14800945  0.97929724 -0.13809456]\n",
            "Vector 22: [ 0.49792802 -0.7209412   0.48198701]\n",
            "Vector 23: [ 0.1745946  -0.62127889 -0.76389087]\n",
            "Vector 24: [-0.9213698   0.05676147 -0.38452025]\n",
            "Vector 25: [-0.38198407  0.92415991 -0.00407882]\n",
            "Vector 26: [ 0.8803601  -0.45295095 -0.14071793]\n",
            "Vector 27: [-0.41344959 -0.74871272  0.51815895]\n",
            "Vector 28: [-0.15440795  0.78830855 -0.5955903 ]\n",
            "Vector 29: [-0.64348694  0.04772129 -0.76396808]\n",
            "Vector 30: [-0.51747529 -0.70509896  0.48482449]\n",
            "Vector 31: [ 0.91423719 -0.09641052 -0.39354209]\n",
            "Vector 32: [ 0.61920146 -0.78519546 -0.00759151]\n",
            "Vector 33: [ 0.75878735  0.25352259 -0.59997338]\n",
            "Vector 34: [-0.35634578 -0.01337478  0.93425842]\n",
            "Vector 35: [-0.61368718 -0.01905718 -0.78931924]\n",
            "Vector 36: [0.29466345 0.47592243 0.82865631]\n",
            "Vector 37: [-0.92733629 -0.01262341  0.37401612]\n",
            "Vector 38: [-0.60456452  0.34594399 -0.71751271]\n",
            "Vector 39: [-0.71476715 -0.12133343  0.68875694]\n",
            "Vector 40: [-0.5467579  -0.83287643  0.08586413]\n",
            "Vector 41: [-0.59869326  0.19915015  0.77582576]\n",
            "Vector 42: [-0.1540859  -0.75633614  0.63577762]\n",
            "Vector 43: [0.28233659 0.92005295 0.2716406 ]\n",
            "Vector 44: [0.52517542 0.84943088 0.05155536]\n",
            "Vector 45: [-0.1151739  -0.96992229 -0.21444282]\n",
            "Vector 46: [-0.55068446 -0.24768119  0.79712023]\n",
            "Vector 47: [ 0.30755323 -0.54941371 -0.7768884 ]\n",
            "Vector 48: [0.11405075 0.94064277 0.3196617 ]\n",
            "Vector 49: [-0.45085162  0.75666818 -0.47348293]\n",
            "Vector 50: [0.33710012 0.86887023 0.36253004]\n",
            "Vector 51: [-0.91360075  0.40313145  0.05309149]\n",
            "Vector 52: [ 0.75801432  0.36429894 -0.54101809]\n",
            "Vector 53: [ 0.59598037 -0.79026229  0.1424532 ]\n",
            "Vector 54: [ 0.1539567  -0.13500415  0.97881112]\n",
            "Vector 55: [ 0.7782273   0.60606023 -0.16447878]\n",
            "Vector 56: [ 0.75288375 -0.57029714  0.32852281]\n",
            "Vector 57: [-0.437406    0.89358587 -0.10089738]\n",
            "Vector 58: [0.9427292 0.2538184 0.2164206]\n",
            "Vector 59: [ 0.14058548  0.92770293 -0.34583666]\n",
            "Vector 60: [ 0.92142208 -0.38658184  0.03918962]\n",
            "Vector 61: [-0.98045615  0.18929784  0.05359175]\n",
            "Vector 62: [ 0.7213324  -0.13312245 -0.67967491]\n",
            "Vector 63: [ 0.01966253  0.82810824 -0.56022329]\n",
            "Vector 64: [ 0.37099718  0.71227874 -0.59583563]\n",
            "Vector 65: [-0.87494715 -0.47294516  0.10387666]\n",
            "Vector 66: [-0.33386814 -0.86254604 -0.38019258]\n",
            "Vector 67: [ 0.46533883 -0.86238232  0.19939032]\n",
            "Vector 68: [-0.08708443  0.91501111 -0.39391747]\n",
            "Vector 69: [0.04576173 0.87455229 0.48276719]\n",
            "Vector 70: [-0.78628347 -0.55072507  0.28010748]\n",
            "Vector 71: [-0.3865343  -0.66669172  0.63727026]\n",
            "Vector 72: [0.26673362 0.58333371 0.76718639]\n",
            "Vector 73: [ 0.78717076 -0.55643943  0.26596493]\n",
            "Vector 74: [ 0.45463655 -0.75602459  0.47088472]\n",
            "Vector 75: [-0.43816712 -0.0224467   0.89861322]\n",
            "Vector 76: [-0.42817484 -0.15043413 -0.89108691]\n",
            "Vector 77: [-0.60063115  0.18468634  0.77790307]\n",
            "Vector 78: [-0.84936579 -0.52117935 -0.08336569]\n",
            "Vector 79: [ 0.34606454 -0.89158406  0.29209109]\n",
            "Vector 80: [-0.18788954 -0.86936591 -0.45705628]\n",
            "Vector 81: [-0.00283991 -0.97396118  0.22669705]\n",
            "Vector 82: [0.77873377 0.39194158 0.48985255]\n",
            "Vector 83: [ 0.07938919 -0.98143979 -0.17456605]\n",
            "Vector 84: [-0.96329645  0.24834108  0.10191495]\n",
            "Vector 85: [-0.7285418  0.3787453 -0.5707704]\n",
            "Vector 86: [ 0.30465577  0.9380927  -0.16482401]\n",
            "Vector 87: [ 0.0150897  -0.95372029  0.30031636]\n",
            "Vector 88: [ 0.90378733  0.05066943 -0.42497186]\n",
            "Vector 89: [0.11664588 0.86737838 0.48378558]\n",
            "Vector 90: [ 0.5242685   0.29695555 -0.7980977 ]\n",
            "Vector 91: [-0.78503553 -0.61256428 -0.09210979]\n",
            "Vector 92: [0.07065612 0.742279   0.66635546]\n",
            "Vector 93: [0.75748978 0.211279   0.61771386]\n",
            "Vector 94: [-0.43348444 -0.50068731  0.74926862]\n",
            "Vector 95: [-0.05839192 -0.8759044  -0.47893827]\n",
            "Vector 96: [ 0.7602596  -0.12632856 -0.63721773]\n",
            "Vector 97: [ 0.30406161 -0.90259843 -0.30473366]\n",
            "Vector 98: [ 0.3849455  -0.03402009 -0.92231209]\n",
            "Vector 99: [ 0.10017925 -0.90705701  0.40891528]\n",
            "Vector 100: [-0.06956564  0.87342573 -0.48196278]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ejercicio 11. a) Escribir un programa que resuelva un sistema $Ax = b$, $A \\in \\mathbb{R}^{n \\times n}$ usando eliminación gaussiana sin pivoteo.\n",
        "\n",
        "b) Adaptar el programa del ítem anterior para que calcule la matriz $A^{-1}$."
      ],
      "metadata": {
        "id": "0nMCtxK5gao6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def resolver_sistema_triangular(U: np.ndarray, b: np.ndarray) -> np.ndarray:\n",
        "    ''' Resuelve un sistema de la forma Ux = b donde U es una matrix triangular superior (a_ij = 0 si i<j)'''\n",
        "    N = U.shape[0]\n",
        "    x = np.empty(N)\n",
        "\n",
        "    # Voy resolviendo de atras para adelante\n",
        "    ## El primero es obvio\n",
        "    x[-1] = b[-1]/U[-1,-1]\n",
        "\n",
        "    ## Hago el resto\n",
        "    for i in range(2,N+1):\n",
        "        x[-i]= (b[-i] - np.dot(U[-i,-i+1:],x[-i+1:])) / U[-i, -i]\n",
        "    return(x)\n",
        "def gauss(A: np.ndarray, b: np.ndarray):\n",
        "    ''' Resuelve un sistema Ax=b via eliminación de Gauss'''\n",
        "    N = len(A)\n",
        "    for i in range(N-1): #Columnas\n",
        "        #Acá habría que agregar el pivoteo en caso de ser necesario (ignorelo por ahora)\n",
        "        for j in range(i+1,N): #Filas\n",
        "            factor = A[j, i] / A[i, i]\n",
        "            A[j,i] = A[j,i] - factor*A[i,i]\n",
        "            b[j] -= factor * b[i]\n",
        "\n",
        "    x = resolver_sistema_triangular(A, b)\n",
        "    return x\n"
      ],
      "metadata": {
        "id": "26zXR-u-gct0"
      },
      "execution_count": 4,
      "outputs": []
    }
  ]
}